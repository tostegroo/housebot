random(min, max)
    floor(math(0, 'random') * (max - min + 1) + min)

vendor(prop, args)
	-webkit-{prop} args;
	-moz-{prop} args;
	-ms-{prop} args;
	-o-{prop} args;
	{prop} args;

box-border()
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;

rel()
	position: relative;
	float: left;

pabs()
	position: absolute;

opacity(value)
	filter: unquote('progid:DXImageTransform.Microsoft.Alpha(Opacity=' + round(value * 100) + ')');
	-moz-opacity: value;
	-khtml-opacity: value;
	opacity: value;

no-select()
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	outline: none;

backgroundAlpha(color)
	background-color: rgba(color, 1);

border-radius(radius)
	-webkit-border-radius: radius;
	-moz-border-radius: radius;
	border-radius: radius;

box-sizing(arg)
	-webkit-box-sizing: arg;
	-moz-box-sizing: arg;
	box-sizing: arg;

text-ellipsis()
	overflow:hidden;
	word-break:break-all;
	white-space: nowrap;
	text-overflow: ellipsis;

disable-ap()
	border: none;
	outline: none;
	display: inline-block;
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;

no-margin()
	margin:0;
	padding:0;

disable-list()
	position:relative;
	list-style:none;
	border: none;
	outline: none;
	float:left;
	border:none;

sprite-container()
	position: absolute;
	top:0px;
	left: 0px;
	width: 100%;
	height: 100%;

content-container()
	position: relative;
	float: left;
	width: 100%;
	height: 100%;
	min-width: 1000px;
	min-height: 700px;

disable-selection()
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;

transition-animate(property, time, ease, delay)
	vendor(transition-property, property);
	vendor(transition-timing-function, ease);
	vendor(transition-duration, time);
	vendor(transition-delay, delay);

transform(args...)
    vendor(transform, args)

animate(animation, duration, delay, ease, count, mode)
    vendor(animation-delay, delay);
    vendor(animation-duration, duration);
    vendor(animation-name, animation);
    vendor(animation-iteration-count, count);
    vendor(animation-timing-function, ease);
    vendor(animation-fill-mode, mode);

easefunctions = {
	'in-quad': cubic-bezier(0.550, 0.085, 0.680, 0.530),
	'in-cubic': cubic-bezier(0.550, 0.055, 0.675, 0.190),
	'in-quart': cubic-bezier(0.895, 0.030, 0.685, 0.220),
	'in-quint': cubic-bezier(0.755, 0.050, 0.855, 0.060),
	'in-sine': cubic-bezier(0.470, 0.000, 0.745, 0.715),
	'in-expo': cubic-bezier(0.950, 0.050, 0.795, 0.035),
	'in-circ': cubic-bezier(0.600, 0.040, 0.980, 0.335),
	'in-back': cubic-bezier(0.600, -0.280, 0.735, 0.045),
	'out-quad': cubic-bezier(0.250, 0.460, 0.450, 0.940),
	'out-cubic': cubic-bezier(0.215, 0.610, 0.355, 1.000),
	'out-quart': cubic-bezier(0.165, 0.840, 0.440, 1.000),
	'out-quint': cubic-bezier(0.230, 1.000, 0.320, 1.000),
	'out-sine': cubic-bezier(0.390, 0.575, 0.565, 1.000),
	'out-expo': cubic-bezier(0.190, 1.000, 0.220, 1.000),
	'out-circ': cubic-bezier(0.075, 0.820, 0.165, 1.000),
	'out-back': cubic-bezier(0.175, 0.885, 0.320, 1.275),
	'in-out-quad': cubic-bezier(0.455, 0.030, 0.515, 0.955),
	'in-out-cubic': cubic-bezier(0.645, 0.045, 0.355, 1.000),
	'in-out-quart': cubic-bezier(0.770, 0.000, 0.175, 1.000),
	'in-out-quint': cubic-bezier(0.860, 0.000, 0.070, 1.000),
	'in-out-sine': cubic-bezier(0.445, 0.050, 0.550, 0.950),
	'in-out-expo': cubic-bezier(1.000, 0.000, 0.000, 1.000),
	'in-out-circ': cubic-bezier(0.785, 0.135, 0.150, 0.860),
	'in-out-back': cubic-bezier(0.680, -0.550, 0.265, 1.550)
};

ease(key)
	if key in easefunctions
		easefunctions[key];
	else
		null
